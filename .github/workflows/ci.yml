---
  name: CI Pipeline
  
  on:
    push:
      branches:
        - master
    pull_request:
      branches:
        - master
  
  jobs:
    backend-tests:
      runs-on: ubuntu-latest
  
      services:
        postgres:
          image: postgres:15
          env:
            POSTGRES_USER: ${{ secrets.POSTGRES_USER_SECRET }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_SECRET }}
            POSTGRES_DB: ${{ vars.PG_DB }}
          ports:
            - 5432:5432
          options: >-
            --health-start-period 30s
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 15
            --log-driver=local
            --log-opt max-size=10m
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Create test database
          run: |
            until pg_isready -h localhost -p 5432 -U postgres; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done
            psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE auth_test_db;"
          env:
            PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD_SECRET }}
  
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.13'
  
        - name: Install uv
          run: |
            pip install uv --upgrade
            uv --version
  
        - name: Install backend dependencies
          run: |
            uv sync --extra dev
            ls -la .venv/bin
            uv run -- python -m pytest --version
  
        - name: Run backend tests
          env:
            SECRET_KEY: your-very-secret-key-123456789
            DATABASE_URL: >-
              postgresql+psycopg2://postgres:P%40ssw0rd@localhost:5432/auth_db
            TEST_DATABASE_URL: >-
              postgresql+psycopg2://postgres:P%40ssw0rd@localhost:5432/auth_test_db
            PG_HOST: localhost
            PG_PORT: 5432
            PG_USER: postgres
            PG_PASSWORD: P@ssw0rd
            PG_DB: auth_db
          run: |
            uv run -- python -m pytest tests/ --cov=app --cov-report=xml
  
        - name: Run migrations
          run: |
            alembic check
            alembic upgrade head

        - name: Upload coverage report
          uses: codecov/codecov-action@v5
          with:
            files: ./coverage.xml
            token: ${{ secrets.CODECOV_TOKEN }}